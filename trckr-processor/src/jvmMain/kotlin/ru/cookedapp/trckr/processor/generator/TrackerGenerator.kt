package ru.cookedapp.trckr.processor.generator

import com.google.devtools.ksp.processing.CodeGenerator
import com.google.devtools.ksp.symbol.KSClassDeclaration
import com.google.devtools.ksp.symbol.KSFunctionDeclaration
import com.google.devtools.ksp.symbol.KSVisitorVoid
import com.squareup.kotlinpoet.KModifier
import com.squareup.kotlinpoet.MemberName
import com.squareup.kotlinpoet.UNIT
import com.squareup.kotlinpoet.ksp.writeTo
import ru.cookedapp.trckr.core.TrckrBuilder
import ru.cookedapp.trckr.core.TrckrCore
import ru.cookedapp.trckr.processor.extensions.getAllDeclarations
import ru.cookedapp.trckr.processor.extensions.toTypeName
import ru.cookedapp.trckr.processor.helpers.addClass
import ru.cookedapp.trckr.processor.helpers.addFunction
import ru.cookedapp.trckr.processor.helpers.addPrimaryConstructor
import ru.cookedapp.trckr.processor.helpers.addProperty
import ru.cookedapp.trckr.processor.helpers.createFile
import ru.cookedapp.trckr.processor.helpers.createLambda
import ru.cookedapp.trckr.processor.helpers.createParameter

internal class TrackerGenerator(private val codeGenerator: CodeGenerator) : KSVisitorVoid() {

    private val eventGenerator = EventGenerator()

    override fun visitClassDeclaration(classDeclaration: KSClassDeclaration, data: Unit) {
        val trackerName = classDeclaration.simpleName.asString()
        val implName = "${trackerName}Impl"
        val trackerType = classDeclaration.toTypeName()

        createFile(
            packageName = classDeclaration.packageName.asString(),
            fileName = implName,
        ) {
            addFileComment("This tracker was generated by trckr symbol processor.\n")
            addFileComment("Do not modify this file.")

            // Tracker class
            val implClass = addClass(implName) {
                addSuperinterface(trackerType)
                addPrimaryConstructor {
                    addParameter(TRACKER_CORE_PROPERTY_NAME, TrckrCore::class)
                }
                val trackerCoreProperty = addProperty(TRACKER_CORE_PROPERTY_NAME, TrckrCore::class) {
                    addModifiers(KModifier.PRIVATE)
                    initializer(TRACKER_CORE_PROPERTY_NAME)
                }

                classDeclaration.getAllDeclarations().filterIsInstance<KSFunctionDeclaration>().forEach { method ->
                    val eventMethod = eventGenerator.generateEvent(method, trackerCoreProperty)
                    addFunction(eventMethod)
                }
            }

            // Factory method
            addFunction("create$trackerName") {
                val builderParameter = createParameter(
                    name = TRCKR_BUILDER_PARAMETER_NAME,
                    type = createLambda<TrckrBuilder>(returnType = UNIT),
                ).also(::addParameter)
                addCode("return %N(%M(%N))", implClass, createTrckrMember, builderParameter)
                returns(trackerType)
            }
        }.writeTo(codeGenerator, aggregating = false)
    }

    companion object {

        private val createTrckrMember = MemberName(
            packageName = "ru.cookedapp.trckr.core",
            simpleName = "createTrckr",
        )

        private const val TRACKER_CORE_PROPERTY_NAME = "trckr"
        private const val TRCKR_BUILDER_PARAMETER_NAME = "builder"
    }
}
